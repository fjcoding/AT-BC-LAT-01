Command pattern is a behavioral design pattern in which an object is used to encapsulate all information 
needed to perform an action or trigger an event at a later time.

Its definition is to encapsulate a request as an object, which allows it to parameterize other objects with 
different requests, queue or record requests, and implement operations cancellation features..

It's also a good pattern to apply the last principle of SOLID (Dependency Inversion Principle) 
about abstraction and encapsulation, where a high and low-level should not depend on each others' implementation, 
but both on abstraction

Is good for:
- Parameterize 
- Queueing
- Undoing 

Used for:
- rules engine 
- workflow that triggers commands
- dynamic interfaces